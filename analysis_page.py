from PyQt5.QtWidgets import (
    QWidget, QLabel, QVBoxLayout,
    QHBoxLayout, QPushButton, QButtonGroup
)
import mplcursors
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import pandas as pd


class AnalysisPage(QWidget):
    def __init__(self):
        super().__init__()
        self.data = None
        self.current_chart = "–ì–∞–Ω—Ç—Ç"
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignTop)

        # üîπ –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤—ã—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
        title.setWordWrap(True)
        title.setStyleSheet("font-size: 18px; font-weight: bold;")
        layout.addWidget(title)

        self.description = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞.")
        layout.addWidget(self.description)

        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_buttons_layout = QHBoxLayout()
        self.chart_buttons = {}

        for chart_type in ["–ì–∞–Ω—Ç—Ç", "–ó–∞—Ç—Ä–∞—Ç—ã", "–†–µ—Å—É—Ä—Å—ã", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–î–∏–Ω–∞–º–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞"]:
            btn = QPushButton(chart_type)
            btn.setCheckable(True)
            btn.setObjectName(f"chartBtn{chart_type}")
            btn.setFixedHeight(30)
            chart_buttons_layout.addWidget(btn)
            self.chart_buttons[chart_type] = btn

        self.chart_buttons["–ì–∞–Ω—Ç—Ç"].setChecked(True)

        button_group = QButtonGroup(self)
        button_group.setExclusive(True)
        for btn in self.chart_buttons.values():
            button_group.addButton(btn)
        button_group.buttonClicked.connect(self.change_chart)

        layout.addLayout(chart_buttons_layout)

        # –ú–µ—Å—Ç–æ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.figure = plt.figure(figsize=(10, 5))
        self.canvas = FigureCanvas(self.figure)
        layout.addWidget(self.canvas)

        # –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
        self.chart_caption = QLabel("")
        self.chart_caption.setWordWrap(True)
        self.chart_caption.setStyleSheet("font-size: 14px; color: #333;")
        layout.addWidget(self.chart_caption)

        self.setLayout(layout)

    def set_data(self, data):
        self.data = data
        if data is not None:
            self.description.setText("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞.")
            self.run_analysis()
        else:
            self.description.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    def run_analysis(self):
        df = self.data.copy()

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç –∫ datetime —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        date_cols = ["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞", "–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"]
        for col in date_cols:
            df[col] = pd.to_datetime(df[col], errors='coerce')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
        if df[date_cols].isna().any().any():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return

        # –†–∞—Å—á—ë—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        df["‚àÜT"] = (df["–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞"]) - (df["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"])
        df["‚àÜT_days"] = df["‚àÜT"].dt.days
        df["‚àÜC"] = df["–§–∞–∫—Ç. –±—é–¥–∂–µ—Ç"] - df["–ü–ª–∞–Ω. –±—é–¥–∂–µ—Ç"]

        self.df_analysis = df

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        self.change_chart(self.chart_buttons[self.current_chart])

    def change_chart(self, button):
        self.current_chart = button.text()
        self.figure.clear()

        df = self.df_analysis if hasattr(self, "df_analysis") else self.data

        if self.current_chart == "–ì–∞–Ω—Ç—Ç":
            self.plot_gantt(df)
            self.chart_caption.setText("–ì–∞–Ω—Ç—Ç-–¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–æ–≤—ã–µ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤.\n"
                                       "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ü–ª–∞–Ω. –∑–Ω–∞—á–µ–Ω–∏–µ–º –§–∞–∫—Ç. –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É —ç—Ç–∞–ø–∞")
        elif self.current_chart == "–ó–∞—Ç—Ä–∞—Ç—ã":
            self.plot_budget_comparison(df)
            self.chart_caption.setText("–î–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞—Ç—Ä–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø–ª–∞–Ω–æ–≤—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º.")
        elif self.current_chart == "–†–µ—Å—É—Ä—Å—ã":
            self.plot_resource_distribution(df)
            self.chart_caption.setText("–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ —ç—Ç–∞–ø–∞–º –ø—Ä–æ–µ–∫—Ç–∞.")
        elif self.current_chart == "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è":
            self.plot_time_deviation(df)
            self.chart_caption.setText("–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏. \n"
                                       "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞.")
        elif self.current_chart == "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è":
            self.plot_time_metrics(df)
            self.chart_caption.setText(
                "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (–∏–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è), —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è), –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –Ω–∞—á–∞–ª–æ–º –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏), –≤ –¥–Ω—è—Ö.")
        elif self.current_chart == "–î–∏–Ω–∞–º–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞":
            self.plot_budget_dynamics(df)
            self.chart_caption.setText(
                "–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –±—é–¥–∂–µ—Ç–∞: –ª–∏–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ –¥–∞—Ç–∞–º –∏–ª–∏ —ç—Ç–∞–ø–∞–º."
                "–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞.")

        self.figure.tight_layout()
        self.canvas.draw()

    def plot_gantt(self, df):
        ax = self.figure.add_subplot(111)
        ax.clear()

        df = df.dropna(subset=["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞", "–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"])
        if df.empty:
            ax.text(0.5, 0.5, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã", ha="center", va="center")
            return

        stages = df["–≠—Ç–∞–ø"].tolist()
        y_pos = range(len(stages))

        duration_plan = (df["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"]).dt.days
        duration_fact = (df["–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞"]).dt.days
        start_plan = df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"]
        start_fact = df["–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞"]

        # –¶–≤–µ—Ç–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        plan_color = "#2c3e50"  # —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∞
        fact_color = "#1abc9c"  # –∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ñ–∞–∫—Ç–∞
        # –¶–≤–µ—Ç–∞ –æ–±–≤–æ–¥–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        status_colors = {
            '–Ω–µ –Ω–∞—á–∞—Ç': '#b0bec5',      # —Å–µ—Ä—ã–π
            '–≤ —Ä–∞–±–æ—Ç–µ': '#42a5f5',      # —Å–∏–Ω–∏–π
            '–≤—ã–ø–æ–ª–Ω–µ–Ω': '#66bb6a',      # –∑–µ–ª–µ–Ω—ã–π
            '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω': '#ef5350',     # –∫—Ä–∞—Å–Ω—ã–π
        }
        def get_status(row):
            if pd.isna(row['–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞']) or row['–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞'] > today:
                return '–Ω–µ –Ω–∞—á–∞—Ç'
            elif pd.notna(row['–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è']) and row['–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è'] <= today:
                return '–≤—ã–ø–æ–ª–Ω–µ–Ω'
            elif row['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è'] < today and (pd.isna(row['–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è']) or row['–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è'] > row['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è']):
                return '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω'
            else:
                return '–≤ —Ä–∞–±–æ—Ç–µ'
        today = pd.Timestamp.now().normalize()
        statuses = df.apply(get_status, axis=1)
        edge_colors = [status_colors.get(status, '#b0bec5') for status in statuses]

        bars_plan = ax.barh(
            [y - 0.2 for y in y_pos], duration_plan, height=0.3,
            left=start_plan, color=plan_color, edgecolor=edge_colors, linewidth=3, label="–ü–ª–∞–Ω"
        )
        bars_fact = ax.barh(
            [y + 0.2 for y in y_pos], duration_fact, height=0.3,
            left=start_fact, color=fact_color, edgecolor=edge_colors, linewidth=3, label="–§–∞–∫—Ç"
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
        ax.set_yticks(y_pos)
        ax.set_yticklabels(stages)
        ax.set_xlabel("–ü–µ—Ä–∏–æ–¥")
        ax.set_title("–ì–∞–Ω—Ç—Ç-–¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        ax.legend()

        min_date = min(df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"].min(), df["–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞"].min())
        max_date = max(df["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"].max(), df["–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"].max())
        ax.set_xlim(min_date, max_date)
        plt.gcf().autofmt_xdate()

        # Tooltip ‚Äî –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
        all_rects = bars_plan + bars_fact
        cursor = mplcursors.cursor(all_rects, hover=True)

        @cursor.connect("add")
        def on_add(sel):
            try:
                y = sel.artist.get_y()
                stage_idx = round(y)

                if stage_idx < 0 or stage_idx >= len(df):
                    return

                stage = df.iloc[stage_idx]["–≠—Ç–∞–ø"]
                plan_start = df.iloc[stage_idx]["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"].strftime("%d.%m.%Y")
                plan_end = df.iloc[stage_idx]["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"].strftime("%d.%m.%Y")
                fact_start = df.iloc[stage_idx]["–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞"].strftime("%d.%m.%Y")
                fact_end = df.iloc[stage_idx]["–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"].strftime("%d.%m.%Y")

                plan_days = duration_plan.iloc[stage_idx]
                fact_days = duration_fact.iloc[stage_idx]

                text = f"{stage}\n–ü–ª–∞–Ω: {plan_start} ‚Äì {plan_end} ({plan_days} –¥–Ω.)\n–§–∞–∫—Ç: {fact_start} ‚Äì {fact_end} ({fact_days} –¥–Ω.)"
                sel.annotation.set(text=text)
                sel.annotation.arrow_patch.set(arrowstyle="simple", facecolor="black")
                sel.annotation.get_bbox_patch().set(fc="white", alpha=0.9)
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ tooltip]: {e}")

        @cursor.connect("remove")
        def on_remove(sel):
            if sel.annotation is not None and sel.annotation.figure is not None:
                sel.annotation.set_visible(False)
                sel.annotation.figure.canvas.draw_idle()

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ plot_gantt
        def clear_annotations():
            for txt in [t for t in ax.texts]:
                txt.remove()
            self.canvas.draw_idle()

        # –ü—Ä–∏ —É—Ö–æ–¥–µ –º—ã—à–∏ —Å –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî –æ—á–∏—â–∞–µ–º –≤—Å—ë
        def on_leave_axes(event):
            clear_annotations()

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        canvas = ax.figure.canvas
        for cid in getattr(ax, '_tooltip_cids', []):
            canvas.mpl_disconnect(cid)
        ax._tooltip_cids = []

        cid1 = canvas.mpl_connect('axes_leave_event', on_leave_axes)
        ax._tooltip_cids.append(cid1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º cursor, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å—á–µ–∑ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if not hasattr(self, '_gantt_cursor'):
            self._gantt_cursor = cursor
        else:
            self._gantt_cursor = cursor

        self.figure.subplots_adjust(bottom=0.2)
        ax.grid(True, axis='x', linestyle='--', alpha=0.6)
        # –î–æ–±–∞–≤–∏–º –ª–µ–≥–µ–Ω–¥—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        from matplotlib.patches import Patch
        legend_elements = [
            Patch(facecolor='#b0bec5', edgecolor='black', label='–ù–µ –Ω–∞—á–∞—Ç'),
            Patch(facecolor='#42a5f5', edgecolor='black', label='–í —Ä–∞–±–æ—Ç–µ'),
            Patch(facecolor='#66bb6a', edgecolor='black', label='–í—ã–ø–æ–ª–Ω–µ–Ω'),
            Patch(facecolor='#ef5350', edgecolor='black', label='–ü—Ä–æ—Å—Ä–æ—á–µ–Ω'),
        ]
        ax.legend(handles=legend_elements + list(ax.get_legend_handles_labels()[0]), loc='upper right')

        self.canvas.draw()

    def plot_budget_comparison(self, df):
        ax = self.figure.add_subplot(111)
        width = 0.35
        indices = range(len(df))

        ax.bar(indices, df["–ü–ª–∞–Ω. –±—é–¥–∂–µ—Ç"], width, label="–ü–ª–∞–Ω", color="#2c3e50")
        ax.bar([i + width for i in indices], df["–§–∞–∫—Ç. –±—é–¥–∂–µ—Ç"], width, label="–§–∞–∫—Ç", color="#1abc9c")

        ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ (–ø–ª–∞–Ω vs —Ñ–∞–∫—Ç)")
        ax.set_ylabel("–ë—é–¥–∂–µ—Ç, —Ä—É–±.")
        ax.set_xticks([i + width / 2 for i in indices])
        ax.set_xticklabels(df["–≠—Ç–∞–ø"], rotation=45)
        ax.legend()

    def plot_resource_distribution(self, df):
        ax = self.figure.add_subplot(111)
        labels = df["–≠—Ç–∞–ø"]
        sizes = df["–†–µ—Å—É—Ä—Å—ã"]
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)
        ax.axis('equal')
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")

    def plot_time_deviation(self, df):
        ax = self.figure.add_subplot(111)

        df = df.dropna(subset=["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞", "–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"])
        if df.empty:
            ax.text(0.5, 0.5, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞", ha="center", va="center")
            return

        df["‚àÜT_days"] = (df["–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞"]) - (df["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"])
        df["‚àÜT_days"] = df["‚àÜT_days"].dt.days

        # –¶–≤–µ—Ç–∞ –∏ —Ç–∏–ø—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        colors = []
        labels = []
        for val in df["‚àÜT_days"]:
            if val > 0:
                colors.append("#ef5350")  # –∫—Ä–∞—Å–Ω—ã–π ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞
                labels.append("–ó–∞–¥–µ—Ä–∂–∫–∞")
            elif val < 0:
                colors.append("#66bb6a")  # –∑–µ–ª–µ–Ω—ã–π ‚Äî –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ
                labels.append("–û–ø–µ—Ä–µ–∂–µ–Ω–∏–µ")
            else:
                colors.append("#b0bec5")  # —Å–µ—Ä—ã–π ‚Äî –Ω–æ—Ä–º–∞
                labels.append("–í —Å—Ä–æ–∫")

        # –¢–æ—á–∫–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        ax.scatter(df["–≠—Ç–∞–ø"], df["‚àÜT_days"], color=colors, s=80, zorder=3)
        # –õ–∏–Ω–∏—è –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        ax.plot(df["–≠—Ç–∞–ø"], df["‚àÜT_days"], color="#e67e22", alpha=0.5, zorder=2)

        # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Ç–æ—á–∫–∞–º–∏
        for i, (x, y, label) in enumerate(zip(df["–≠—Ç–∞–ø"], df["‚àÜT_days"], labels)):
            if y > 0:
                txt = f"+{y} –¥–Ω. ({label})"
            elif y < 0:
                txt = f"{y} –¥–Ω. ({label})"
            else:
                txt = f"0 –¥–Ω. (–í —Å—Ä–æ–∫)"
            ax.annotate(txt, (x, y), textcoords="offset points", xytext=(0,8), ha='center', fontsize=10, color=colors[i])

        ax.set_title("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —ç—Ç–∞–ø–∞–º –ø—Ä–æ–µ–∫—Ç–∞")
        ax.set_ylabel("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –¥–Ω–∏")
        ax.axhline(0, color='gray', linestyle='--')
        plt.xticks(rotation=45)
        ax.grid(axis='y', linestyle=':', alpha=0.5)

        # –õ–µ–≥–µ–Ω–¥–∞
        from matplotlib.lines import Line2D
        legend_elements = [
            Line2D([0], [0], marker='o', color='w', label='–ó–∞–¥–µ—Ä–∂–∫–∞', markerfacecolor='#ef5350', markersize=10),
            Line2D([0], [0], marker='o', color='w', label='–û–ø–µ—Ä–µ–∂–µ–Ω–∏–µ', markerfacecolor='#66bb6a', markersize=10),
            Line2D([0], [0], marker='o', color='w', label='–í —Å—Ä–æ–∫', markerfacecolor='#b0bec5', markersize=10),
        ]
        ax.legend(handles=legend_elements, loc='upper right')

        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
        self.chart_caption.setText(
            "–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏: –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ ‚Äî —ç—Ç–∞–ø –ø—Ä–æ–µ–∫—Ç–∞.\n"
            "–ö—Ä–∞—Å–Ω—ã–π ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ (—ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ –ø–ª–∞–Ω–∞), –∑–µ–ª–µ–Ω—ã–π ‚Äî –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ (—ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω —Ä–∞–Ω—å—à–µ), —Å–µ—Ä—ã–π ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Å—Ä–æ–∫.\n"
            "–ü–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Ç–æ—á–∫–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–µ–ª–∏—á–∏–Ω—É –∏ —Ç–∏–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞."
        )
        self.figure.tight_layout()
        self.canvas.draw()

    def plot_execution_time(self, df):
        ax = self.figure.add_subplot(111)

        df = df.dropna(subset=["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞", "–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"])
        if df.empty:
            ax.text(0.5, 0.5, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞", ha="center", va="center")
            return

        df["–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"] = (df["–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞"]).dt.total_seconds() / 3600  # –ß–∞—Å—ã
        df["–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è"] = (df["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"]).dt.total_seconds() / 3600  # –ß–∞—Å—ã

        x = df["–≠—Ç–∞–ø"]
        y1 = df["–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è"]
        y2 = df["–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]

        width = 0.35
        ax.bar(x, y1, width, label="–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è", color="#2c3e50")
        ax.bar(x, y2, width, label="–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è", color="#1abc9c", bottom=y1)

        ax.set_title("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤")
        ax.set_ylabel("–í—Ä–µ–º—è, —á–∞—Å—ã")
        ax.legend()

    def load_time_metrics_from_knowledge_base(self):
        import os, json
        time_file = os.path.join(os.path.dirname(__file__), 'knowledge_base_time.json')
        if os.path.exists(time_file):
            with open(time_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(data)
            df.rename(columns={"stage": "–≠—Ç–∞–ø", "norm": "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–Ω–∏)", "fact": "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å (–¥–Ω–∏)"}, inplace=True)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ float
            df["–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–Ω–∏)"] = pd.to_numeric(df["–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–Ω–∏)"], errors='coerce')
            df["–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å (–¥–Ω–∏)"] = pd.to_numeric(df["–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å (–¥–Ω–∏)"], errors='coerce')
            return df
        return None

    def plot_time_metrics(self, df):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        kb_df = self.load_time_metrics_from_knowledge_base()
        if kb_df is not None and not kb_df.empty:
            df = kb_df
        ax = self.figure.add_subplot(111)
        ax.clear()
        required_cols = ["–≠—Ç–∞–ø"]
        for col in required_cols:
            if col not in df.columns:
                ax.text(0.5, 0.5, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {col}", ha="center", va="center")
                return
        norm = df["–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–Ω–∏)"] if "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–Ω–∏)" in df.columns else [None]*len(df)
        fact = df["–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å (–¥–Ω–∏)"] if "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å (–¥–Ω–∏)" in df.columns else [None]*len(df)
        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç—ã, –∏–Ω–∞—á–µ None
        if "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞" in df.columns and "–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è" in df.columns:
            cal = (df["–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"]).dt.days
        elif "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞" in df.columns and "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è" in df.columns:
            cal = (df["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"] - df["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"]).dt.days
        else:
            cal = [None]*len(df)
        x = df["–≠—Ç–∞–ø"]
        bar_width = 0.25
        indices = range(len(x))
        ax.bar([i - bar_width for i in indices], norm, width=bar_width, color="#3CB371", label="–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        ax.bar(indices, fact, width=bar_width, color="#90EE90", label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å")
        ax.bar([i + bar_width for i in indices], cal, width=bar_width, color="#FF6347", label="–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        ax.set_xticks(indices)
        ax.set_xticklabels(x, rotation=30, ha="right")
        ax.set_ylabel("–í—Ä–µ–º—è, –¥–Ω–∏")
        ax.set_title("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞, –¥–Ω–∏")
        ax.legend()
        ax.grid(axis="y", linestyle=":", alpha=0.5)
        self.figure.subplots_adjust(bottom=0.3)
        self.canvas.draw()

    def plot_budget_dynamics(self, df):
        ax = self.figure.add_subplot(111)
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç—Ç–∞–ø–∞ (–∏–ª–∏ –ø–æ —ç—Ç–∞–ø—É, –µ—Å–ª–∏ –¥–∞—Ç –Ω–µ—Ç)
        if "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è" in df.columns:
            df_sorted = df.sort_values("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
            x = df_sorted["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"]
            x_label = "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç—Ç–∞–ø–∞"
        else:
            df_sorted = df.copy()
            x = df_sorted["–≠—Ç–∞–ø"]
            x_label = "–≠—Ç–∞–ø"
        y_plan = df_sorted["–ü–ª–∞–Ω. –±—é–¥–∂–µ—Ç"]
        y_fact = df_sorted["–§–∞–∫—Ç. –±—é–¥–∂–µ—Ç"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
        if y_plan.isnull().all() or y_fact.isnull().all():
            ax.text(0.5, 0.5, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞", ha="center", va="center")
            return

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏, —Ü–≤–µ—Ç–∞–º–∏ –∏ –∑–∞–ª–∏–≤–∫–æ–π –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏
        ax.plot(x, y_plan, marker="o", label="–ü–ª–∞–Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç", color="#2c3e50", linewidth=2)
        ax.plot(x, y_fact, marker="o", label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±—é–¥–∂–µ—Ç", color="#e74c3c", linewidth=2)
        ax.fill_between(x, y_plan, y_fact, where=(y_fact > y_plan), color="#ffcccc", alpha=0.5, label="–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥")
        ax.fill_between(x, y_plan, y_fact, where=(y_fact < y_plan), color="#c8e6c9", alpha=0.5, label="–≠–∫–æ–Ω–æ–º–∏—è")

        # –ü–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ç–æ—á–∫–∞—Ö
        for i, (xv, yp, yf) in enumerate(zip(x, y_plan, y_fact)):
            ax.annotate(f"{int(yp)}", (xv, yp), textcoords="offset points", xytext=(0,8), ha='center', fontsize=9, color="#2c3e50")
            ax.annotate(f"{int(yf)}", (xv, yf), textcoords="offset points", xytext=(0,-12), ha='center', fontsize=9, color="#e74c3c")

        ax.set_xlabel(x_label)
        ax.set_ylabel("–ë—é–¥–∂–µ—Ç, —Ä—É–±.")
        ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
        ax.legend(loc="upper left")
        ax.grid(True, linestyle=":", alpha=0.5)
        plt.xticks(rotation=30, ha="right")
        self.figure.tight_layout()
        self.canvas.draw()

    def save_charts(self):
        import tempfile
        chart_types = ["–ì–∞–Ω—Ç—Ç", "–ó–∞—Ç—Ä–∞—Ç—ã", "–†–µ—Å—É—Ä—Å—ã", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "–î–∏–Ω–∞–º–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞"]
        chart_files = []

        for chart_type in chart_types:
            self.figure.clear()
            if chart_type == "–ì–∞–Ω—Ç—Ç":
                self.plot_gantt(self.df_analysis)
            elif chart_type == "–ó–∞—Ç—Ä–∞—Ç—ã":
                self.plot_budget_comparison(self.df_analysis)
            elif chart_type == "–†–µ—Å—É—Ä—Å—ã":
                self.plot_resource_distribution(self.df_analysis)
            elif chart_type == "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è":
                self.plot_time_deviation(self.df_analysis)
            elif chart_type == "–î–∏–Ω–∞–º–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞":
                self.plot_budget_dynamics(self.df_analysis)

            temp_file = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
            self.figure.savefig(temp_file.name, bbox_inches="tight")
            chart_files.append((chart_type, temp_file.name))

        self.change_chart(self.chart_buttons[self.current_chart])  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        return chart_files
