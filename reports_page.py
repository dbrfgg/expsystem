from PyQt5.QtWidgets import QWidget, QLabel, QVBoxLayout, QPushButton, QFileDialog
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox
from docx import Document
from docx.shared import Inches
import pandas as pd
import os
import tempfile
from docx2pdf import convert
import time


class ReportsPage(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignTop)

        # –ù–æ–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∏ –∫–Ω–æ–ø–æ–∫
        self.setStyleSheet("""
            QLabel#reportsTitle {
                font-size: 20px;
                font-weight: bold;
                color: #232526;
                margin-bottom: 8px;
            }
            QLabel#reportsDesc {
                font-size: 15px;
                color: #4a4a4a;
                margin-bottom: 18px;
            }
            QPushButton#reportsBtn {
                min-height: 44px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #f8fafc, stop:1 #e0e7ef);
                color: #232526;
                padding: 12px 22px;
                font-size: 16px;
                border: none;
                border-radius: 10px;
                margin: 8px 0 12px 0;
                text-align: left;
                transition: background 0.3s, color 0.3s, box-shadow 0.3s;
                box-shadow: 0 2px 8px rgba(44,62,80,0.06);
                letter-spacing: 0.5px;
                word-break: break-word;
                white-space: normal;
                line-height: 1.2;
            }
            QPushButton#reportsBtn:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #e0f7fa, stop:1 #b2ebf2);
                color: #00796b;
                box-shadow: 0 4px 16px rgba(26,188,156,0.10);
            }
        """)

        title = QLabel("–í–∫–ª–∞–¥–∫–∞: –û—Ç—á—ë—Ç—ã")
        title.setObjectName("reportsTitle")
        layout.addWidget(title)

        self.description = QLabel("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        self.description.setObjectName("reportsDesc")
        layout.addWidget(self.description)

        self.word_btn = QPushButton("üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ Word")
        self.word_btn.setObjectName("reportsBtn")
        self.word_btn.clicked.connect(self.generate_word_report)
        layout.addWidget(self.word_btn)

        self.pdf_btn = QPushButton("üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ PDF")
        self.pdf_btn.setObjectName("reportsBtn")
        self.pdf_btn.clicked.connect(self.generate_pdf_report)
        layout.addWidget(self.pdf_btn)

        self.setLayout(layout)

    def get_project_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ MainWindow"""
        return self.window().get_project_data()

    def get_calculations_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ CalculationsPage"""
        calc_page = self.window().pages.get("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        if calc_page and hasattr(calc_page, "calculations_data"):
            return calc_page.calculations_data
        return None

    def get_recommendations_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ RecommendationsPage"""
        rec_page = self.window().pages.get("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        if rec_page and hasattr(rec_page, "table"):
            recommendations = []
            for row in range(rec_page.table.rowCount()):
                stage = rec_page.table.item(row, 0).text()
                problem = rec_page.table.item(row, 1).text()
                recommendation = rec_page.table.item(row, 2).text()
                recommendations.append([stage, problem, recommendation])
            return recommendations
        return []

    def get_charts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–∞–º –∏–∑ AnalysisPage"""
        analysis_page = self.window().pages.get("–ê–Ω–∞–ª–∏–∑")
        if analysis_page and hasattr(analysis_page, "save_charts"):
            return analysis_page.save_charts()
        return []

    def generate_word_report(self, file_path=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word. –ï—Å–ª–∏ file_path –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        start_time = time.time()
        if not file_path:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç", "", "Word Files (*.docx)"
            )
            if not file_path:
                return False

        try:
            doc = Document()
            doc.add_heading("–û—Ç—á—ë—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–µ–∫—Ç–∞", 0)

            # –†–∞–∑–¥–µ–ª 1: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            t1 = time.time()
            project_data = self.get_project_data()
            if project_data is not None:
                doc.add_heading("1. –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞", level=1)
                table = doc.add_table(rows=1 + len(project_data), cols=len(project_data.columns))
                table.style = "Table Grid"
                for j, col in enumerate(project_data.columns):
                    table.rows[0].cells[j].text = col
                for i, row in project_data.iterrows():
                    for j, val in enumerate(row):
                        table.rows[i + 1].cells[j].text = str(val)
            else:
                doc.add_paragraph("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            print(f"Project data section took {time.time() - t1:.2f} seconds")

            # –†–∞–∑–¥–µ–ª 2: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            t2 = time.time()
            calc_data = self.get_calculations_data()
            if calc_data is not None:
                doc.add_heading("2. –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", level=1)
                selected_columns = ["–≠—Ç–∞–ø", "ŒîT", "ŒîC", "E"]
                filtered_calc_data = calc_data[selected_columns]
                table = doc.add_table(rows=1 + len(filtered_calc_data), cols=len(filtered_calc_data.columns))
                table.style = "Table Grid"
                for j, col in enumerate(filtered_calc_data.columns):
                    table.rows[0].cells[j].text = col
                for i, row in filtered_calc_data.iterrows():
                    for j, val in enumerate(row):
                        table.rows[i + 1].cells[j].text = str(val)
            else:
                doc.add_paragraph("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            print(f"Calculations section took {time.time() - t2:.2f} seconds")

            # –†–∞–∑–¥–µ–ª 3: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            t3 = time.time()
            recommendations = self.get_recommendations_data()
            if recommendations:
                doc.add_heading("3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", level=1)
                table = doc.add_table(rows=1 + len(recommendations), cols=3)
                table.style = "Table Grid"
                table.rows[0].cells[0].text = "–≠—Ç–∞–ø"
                table.rows[0].cells[1].text = "–ü—Ä–æ–±–ª–µ–º–∞"
                table.rows[0].cells[2].text = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
                for i, (stage, problem, recommendation) in enumerate(recommendations):
                    table.rows[i + 1].cells[0].text = stage
                    table.rows[i + 1].cells[1].text = problem
                    table.rows[i + 1].cells[2].text = recommendation
            else:
                doc.add_paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            print(f"Recommendations section took {time.time() - t3:.2f} seconds")

            # –†–∞–∑–¥–µ–ª 4: –ì—Ä–∞—Ñ–∏–∫–∏
            t4 = time.time()
            charts = self.get_charts()
            if charts:
                doc.add_heading("4. –ì—Ä–∞—Ñ–∏–∫–∏", level=1)
                for chart_name, chart_path in charts:
                    doc.add_paragraph(chart_name)
                    doc.add_picture(chart_path, width=Inches(5.5))
            else:
                doc.add_paragraph("–ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            print(f"Charts section took {time.time() - t4:.2f} seconds")

            doc.save(file_path)
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            t5 = time.time()
            for _, chart_path in charts:
                os.remove(chart_path)
            print(f"File cleanup took {time.time() - t5:.2f} seconds")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–§–∞–π–ª Word —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            print(f"Total Word report generation took {time.time() - start_time:.2f} seconds")
            return True
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç: {str(e)}")
            return False

    def generate_pdf_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –ø—É—Ç—ë–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Word-–¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        start_time = time.time()
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç", "", "PDF Files (*.pdf)"
        )
        if not file_path:
            return

        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Word-—Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".docx", delete=False) as temp_docx:
                temp_docx_path = temp_docx.name

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Word-–¥–æ–∫—É–º–µ–Ω—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            t1 = time.time()
            if not self.generate_word_report(temp_docx_path):
                return
            print(f"Word file generation for PDF took {time.time() - t1:.2f} seconds")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Word –≤ PDF
            t2 = time.time()
            convert(temp_docx_path, file_path)
            print(f"PDF conversion took {time.time() - t2:.2f} seconds")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Word-—Ñ–∞–π–ª
            t3 = time.time()
            os.remove(temp_docx_path)
            print(f"Temp file cleanup took {time.time() - t3:.2f} seconds")

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–§–∞–π–ª PDF —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            print(f"Total PDF report generation took {time.time() - start_time:.2f} seconds")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {str(e)}")
