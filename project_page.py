from PyQt5.QtWidgets import (
    QWidget, QLabel, QVBoxLayout,
    QPushButton, QFileDialog, QTableWidget, QTableWidgetItem,
    QTreeView, QHBoxLayout
)
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QStandardItemModel, QStandardItem
import pandas as pd
import os


class ProjectPage(QWidget):
    def __init__(self):
        super().__init__()
        self.data = None
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignTop)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í–∫–ª–∞–¥–∫–∞: –ü—Ä–æ–µ–∫—Ç")
        title.setStyleSheet("font-size: 18px; font-weight: bold;")
        layout.addWidget(title)

        # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        self.import_btn = QPushButton("üìÅ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
        self.import_btn.clicked.connect(self.load_project)
        self.import_btn.setObjectName("menuButton")
        layout.addWidget(self.import_btn)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–µ—Ä–µ–≤–∞
        content_layout = QHBoxLayout()

        # –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setWordWrap(True)
        self.table.verticalHeader().setVisible(False)  # –°–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—ã–π (–Ω–æ–º–µ—Ä–Ω–æ–π) —Å—Ç–æ–ª–±–µ—Ü
        self.table.horizontalHeader().setMinimumSectionSize(120)
        self.table.horizontalHeader().setDefaultSectionSize(150)
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.horizontalHeader().setStyleSheet("QHeaderView::section {padding: 8px;}")
        content_layout.addWidget(self.table, stretch=2)

        # –î–µ—Ä–µ–≤–æ —ç—Ç–∞–ø–æ–≤
        self.tree_view = QTreeView()
        self.tree_model = QStandardItemModel()
        self.tree_model.setHorizontalHeaderLabels(["–≠—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞"])
        self.tree_view.setModel(self.tree_model)
        content_layout.addWidget(self.tree_view, stretch=1)

        layout.addLayout(content_layout)
        self.setLayout(layout)

        self.goto_analysis_btn = QPushButton("‚û° –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É")
        self.goto_analysis_btn.clicked.connect(self.goto_analysis)
        self.goto_analysis_btn.setObjectName("menuButton")
        layout.addWidget(self.goto_analysis_btn)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ –ü—Ä–æ–µ–∫—Ç
        self.setStyleSheet("""
            #projectButton {
                min-height: 44px;
                min-width: 0px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #f8fafc, stop:1 #e0e7ef);
                color: #232526;
                padding: 12px 22px;
                font-size: 16px;
                border: none;
                border-radius: 10px;
                margin: 8px 0 8px 0;
                text-align: left;
                transition: background 0.3s, color 0.3s, box-shadow 0.3s;
                box-shadow: 0 2px 8px rgba(44,62,80,0.06);
                letter-spacing: 0.5px;
                word-break: break-word;
                white-space: normal;
                line-height: 1.2;
            }
            #projectButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #e0f7fa, stop:1 #b2ebf2);
                color: #00796b;
                box-shadow: 0 4px 16px rgba(26,188,156,0.10);
            }
            #projectButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #fffde4, stop:1 #f7e8a4);
                color: #b28704;
                font-weight: bold;
                border: 2px solid #ffe082;
                box-shadow: 0 4px 24px rgba(255,215,0,0.12);
            }
        """)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–µ—Ä–µ–≤–∞
        self.setStyleSheet("""
            QTableWidget {
                background: #f8fafc;
                border: 1px solid #e0e7ef;
                border-radius: 10px;
                font-size: 15px;
                color: #232526;
                selection-background-color: #e0f7fa;
                selection-color: #00796b;
                gridline-color: #e0e7ef;
                padding: 4px;
            }
            QTableWidget::item {
                padding: 8px;
            }
            QTableWidget::item:selected {
                background: #b2ebf2;
                color: #00796b;
            }
            QHeaderView::section {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #e0e7ef, stop:1 #f8fafc);
                color: #232526;
                font-weight: bold;
                font-size: 15px;
                border: 1px solid #e0e7ef;
                border-radius: 8px;
                padding: 8px;
                min-width: 120px;
                max-width: 300px;
                word-break: break-word;
                white-space: normal;
            }
            QTableWidget QHeaderView {
                font-size: 15px;
            }
            QTreeView {
                background: #f8fafc;
                border: 1px solid #e0e7ef;
                border-radius: 10px;
                font-size: 15px;
                color: #232526;
                selection-background-color: #e0f7fa;
                selection-color: #00796b;
                padding: 4px;
            }
            QTreeView::item {
                padding: 6px 8px;
            }
            QTreeView::item:selected {
                background: #b2ebf2;
                color: #00796b;
            }
            QTreeView::branch:selected {
                background: #b2ebf2;
            }
        """)

    def load_project(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞",
            "",
            "Excel Files (*.xlsx);;CSV Files (*.csv);;JSON Files (*.json)"
        )

        if not file_path:
            return

        try:
            ext = os.path.splitext(file_path)[1].lower()
            if ext == ".xlsx":
                df = pd.read_excel(file_path)
            elif ext == ".csv":
                df = pd.read_csv(file_path)
            elif ext == ".json":
                df = pd.read_json(file_path)
            else:
                raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.data = df

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            required_columns = [
                "–≠—Ç–∞–ø", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                "–§–∞–∫—Ç –Ω–∞—á–∞–ª–∞", "–§–∞–∫—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–ü–ª–∞–Ω. –±—é–¥–∂–µ—Ç", "–§–∞–∫—Ç. –±—é–¥–∂–µ—Ç", "–†–µ—Å—É—Ä—Å—ã"
            ]
            missing = [col for col in required_columns if col not in df.columns]
            if missing:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing)}")

            # –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –¥–µ—Ä–µ–≤–æ
            self.update_table(df)
            self.update_tree(df)

        except Exception as e:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def update_table(self, df):
        self.table.setRowCount(df.shape[0])
        self.table.setColumnCount(df.shape[1])
        self.table.setHorizontalHeaderLabels(df.columns)

        for i in range(df.shape[0]):
            for j in range(df.shape[1]):
                item = QTableWidgetItem(str(df.iat[i, j]))
                self.table.setItem(i, j, item)

    def update_tree(self, df):
        self.tree_model.clear()
        self.tree_model.setHorizontalHeaderLabels(["–≠—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞"])

        root_item = self.tree_model.invisibleRootItem()

        for _, row in df.iterrows():
            stage = QStandardItem(row["–≠—Ç–∞–ø"])
            responsible = QStandardItem(f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {row['–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π']}")
            duration = QStandardItem(f"–°—Ä–æ–∫: {row['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞']} ‚Äì {row['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è']}")
            budget = QStandardItem(f"–ë—é–¥–∂–µ—Ç: {row['–ü–ª–∞–Ω. –±—é–¥–∂–µ—Ç']} —Ä—É–±.")

            stage.appendRow(responsible)
            stage.appendRow(duration)
            stage.appendRow(budget)

            root_item.appendRow(stage)

    def goto_analysis(self):
        if self.data is not None:
            self.window().set_project_data(self.data)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            self.window().switch_page("–ê–Ω–∞–ª–∏–∑")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞.")
